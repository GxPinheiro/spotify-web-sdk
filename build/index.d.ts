declare const _default: {
    getAlbum: (id: string) => Promise<import("./models/album/album").default>;
    getSeveralAlbums: (ids: string[]) => Promise<any>;
    getAlbumTracks: (id: string, offset?: number, limit?: number) => Promise<import("./models/paging/page").default<import("./models/track/track-simplified").default>>;
    getPlaylist: (id: string) => Promise<import("./models/playlist/playlist").default>;
    getPlaylistTracks: (id: string, offset?: number, limit?: number) => Promise<import("./models/paging/page").default<import("./models/playlist/playlist-track").default>>;
    getUserPlaylists: (id: string, offset?: number, limit?: number) => Promise<import("./models/paging/page").default<import("./models/playlist/playlist-simplified").default>>;
    getArtist: (id: string) => Promise<import("./models/artist/artist").default>;
    getSeveralArtists: (ids: string[]) => Promise<any>;
    getArtistAlbums: (id: string, offset?: number, limit?: number) => Promise<import("./models/paging/page").default<import("./models/album/album-simplified").default>>;
    getRelatedArtists: (id: string) => Promise<any>;
    getArtistTopTracks: (id: string) => Promise<any>;
    getFollowedArtists: (limit?: number, after?: string | undefined) => Promise<import("./models/artist/artist").default[]>;
    isFollowing: (type: string, ids: string[]) => Promise<boolean[]>;
    checkUsersFollowingPlaylist: (playlistId: string, ids: string[]) => Promise<boolean[]>;
    getSeveralTracks: (ids: string[]) => Promise<any>;
    getTrack: (id: string) => Promise<import("./models/track/track").default>;
    init: (token: string) => void;
    getToken: () => string;
    getAxiosSpotifyInstance: () => import("axios").AxiosInstance;
};
export default _default;
